// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    nessie_id     String?   // Atributo para la integración con la API de Nessie
    account_id    String?
    categories    String[]
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    expenses      Expense[] // Relación con los gastos
    budgets       Budget[]  // Relación con los presupuestos
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Tabla para los gastos
model Expense {
    id          String    @id @default(cuid())
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    amount      Float     // Cantidad del gasto
    description String    // Descripción del gasto
    categories    String    // Categoría del gasto (ej. Gastos hormiga, Servicios, etc.)
    createdAt   DateTime  @default(now())
    merchant    Merchant? @relation(fields: [merchantId], references: [id])
    merchantId  String?
}

// Tabla para los presupuestos
model Budget {
    id          String   @id @default(cuid())
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    category    String // Categorias de los gastos 
    amount      Float    // Monto asignado para la categoría
    period      String   // Puede ser "Mensual" o "Semanal"
    isValid     Boolean
    createdAt   DateTime @default(now())
}

// Nueva tabla merchants
model Merchant {
    id         String   @id @default(cuid())
    name       String
    categories String[] // Array de categorías de tipo string
    expenses   Expense[] // Relación con los gastos
}